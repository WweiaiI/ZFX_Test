package com.zfx;

import java.util.*;

/**
* 张方兴
*/
public class MyList<E> extends AbstractList<E>
        implements List<E>, RandomAccess, Cloneable, java.io.Serializable {

        private static final int DEFAULT_CAPACITY = 10;//默认初始化容量

        private static final Object[] EMPTY_ELEMENTDATA = {};//创建共享的空实例

        private static final Object[] DEFAULTCAPACITY_EMPTY_ELEMENTDATA = {};//创建默认大小的空实例，区分共享实例

        transient Object[] elementData; //存储数据的缓冲区，当实际添加元素时，扩充为默认容量。其为非私有以简化匿名函数的访问。

        private int size;//ArrayList的具体大小

        /**
         * 构造具有指定初始容量的空列表。
         * @param  initialCapacity  列表的初始容量
         * @throws IllegalArgumentException 如果初始容量为负数时抛出异常
         */
        public MyList(int initialCapacity) {
            if (initialCapacity > 0) {
                this.elementData = new Object[initialCapacity];
            } else if (initialCapacity == 0) {
                this.elementData = EMPTY_ELEMENTDATA;
            } else {
                throw new IllegalArgumentException("Illegal Capacity: "+ initialCapacity);
            }
        }

        /**
         * 构造一个初始容量为10的空列表。
         */
        public MyList() {
            this.elementData = DEFAULTCAPACITY_EMPTY_ELEMENTDATA;
        }

        /**
         * 裁剪集合大小，以防止数组中含有没有元素的空位置
         */
        public void trimToSize() {
            modCount++;//此列表在结构上被修改的次数
            if (size < elementData.length) {
                elementData = (size == 0) ? EMPTY_ELEMENTDATA : Arrays.copyOf(elementData, size);
            }
        }

        /**
         * 要分配的最大数组大小。一些vm在数组中保留一些头字。尝试分配较大的数组可能会导致OutOfMemoryError:请求的数组大小超出VM限制
         */
        private static final int MAX_ARRAY_SIZE = Integer.MAX_VALUE - 8;

        /**
         * 增加容量，以确保它至少可以容纳由minCapacity参数指定的元素数。
         * @param minCapacity 所需的最小容量
         */
        private void grow(int minCapacity) {
            // overflow-conscious code
            int oldCapacity = elementData.length;
            int newCapacity = oldCapacity + (oldCapacity >> 1);
            if (newCapacity - minCapacity < 0){
                newCapacity = minCapacity;
            }
            if (newCapacity - MAX_ARRAY_SIZE > 0){
                if (minCapacity < 0){
                    throw new OutOfMemoryError();
                }
                newCapacity = (minCapacity > MAX_ARRAY_SIZE) ? Integer.MAX_VALUE : MAX_ARRAY_SIZE;
            }
            elementData = Arrays.copyOf(elementData, newCapacity);
        }

        /**
         * 获取其中某一个元素
         */
        E elementData(int index) {
            return (E) elementData[index];
        }

        /**
         * 返回此列表中指定位置的元素。
         *
         * @param  index 要返回的元素的索引
         * @return 此列表中指定位置的元素
         * @throws IndexOutOfBoundsException 如果越界时报异常
         */
        public E get(int index) {
            rangeCheck(index);
            return elementData(index);
        }

        /**
         * 指定的元素替换此列表中指定位置的元素。
         *
         * @param index 要替换的元素的索引
         * @param element 要存储在指定位置的元素
         * @return 先前位于指定位置的元素
         * @throws IndexOutOfBoundsException 如果越界时报异常
         */
        public E set(int index, E element) {
            rangeCheck(index);

            E oldValue = elementData(index);
            elementData[index] = element;
            return oldValue;
        }

        /**
         * 将指定的元素追加到此列表的末尾。
         *
         * @param e 要附加到此列表的元素
         * @return <tt>true</tt>
         */
        public boolean add(E e) {
            ensureCapacityInternal(size + 1);  // Increments modCount!!
            elementData[size++] = e;
            return true;
        }

        /**
         * 在此列表中的指定位置插入指定的元素。将当前位于该位置的元素（如果有）和任何后续元素向右移动（将一个元素添加到其索引中）。
         *
         * @param index 要插入指定元素的索引
         * @param element 要插入的元素
         * @throws IndexOutOfBoundsException 如果越界时报异常
         */
        public void add(int index, E element) {
            rangeCheck(index);

            ensureCapacityInternal(size + 1);  // Increments modCount!!
            System.arraycopy(elementData, index, elementData, index + 1, size - index);
            elementData[index] = element;
            size++;
        }

        /**
         * 删除此列表中指定位置的元素。将任何后续元素向左移动（从其索引中减去一个)
         *
         * @param index 要删除的元素的索引
         * @return 从列表中删除的元素
         * @throws IndexOutOfBoundsException 如果越界时报异常
         */
        public E remove(int index) {
            rangeCheck(index);

            modCount++;
            E oldValue = elementData(index);

            int numMoved = size - index - 1;
            if (numMoved > 0)
                System.arraycopy(elementData, index+1, elementData, index,numMoved);
            elementData[--size] = null; // 明确让GC去删除

            return oldValue;
        }

        /**
         * 从此列表中删除所有元素。此呼叫返回后，列表将为空。
         */
        public void clear() {
            modCount++;
            for (int i = 0; i < size; i++){
                elementData[i] = null;// 明确让GC去删除
            }
            size = 0;
        }

        /**
         * 检查给定索引是否在范围内。
         * @throws IndexOutOfBoundsException 如果否定则抛出异常
         */
        private void rangeCheck(int index) {
            if (index >= size){
                throw new IndexOutOfBoundsException("Index: "+index+", Size: "+size);
            }
        }

        @Override
        public void sort(Comparator<? super E> c) {
            final int expectedModCount = modCount;
            Arrays.sort((E[]) elementData, 0, size, c);
            if (modCount != expectedModCount) {
                throw new ConcurrentModificationException();
            }
            modCount++;
        }

        private static int calculateCapacity(Object[] elementData, int minCapacity) {
            if (elementData == DEFAULTCAPACITY_EMPTY_ELEMENTDATA) {
                return Math.max(DEFAULT_CAPACITY, minCapacity);
            }
            return minCapacity;
        }

        private void ensureCapacityInternal(int minCapacity) {
            ensureExplicitCapacity(calculateCapacity(elementData, minCapacity));
        }

        private void ensureExplicitCapacity(int minCapacity) {
            modCount++;
            if (minCapacity - elementData.length > 0)
                grow(minCapacity);
        }

        public int size() { return size; }

        public boolean isEmpty() { return size == 0; }

        public Object[] toArray() { return Arrays.copyOf(elementData, size); }

        /**
         * 按正确的顺序返回此列表中元素的迭代器。
         * @return 返回的是快速失败的迭代器
         */
        public Iterator<E> iterator() {
            return new MyList.Itr();
        }

        /**
         * 自定义迭代器
         */
        private class Itr implements Iterator<E> {
            int cursor;       // 要返回的下一个元素的索引
            int lastRet = -1; // 返回的最后一个元素的索引-1，如果没有则应报no such错误
            int expectedModCount = modCount;

            Itr() {}//初始化

            public boolean hasNext() {
                return cursor != size;
            }

            public E next() {
                checkForComodification();
                int i = cursor;
                if (i >= size)
                    throw new NoSuchElementException();
                Object[] elementData = MyList.this.elementData;
                if (i >= elementData.length)
                    throw new ConcurrentModificationException();
                cursor = i + 1;
                return (E) elementData[lastRet = i];
            }

            public void remove() {
                if (lastRet < 0){
                    throw new IllegalStateException();
                }
                checkForComodification();

                try {
                    MyList.this.remove(lastRet);
                    cursor = lastRet;
                    lastRet = -1;
                    expectedModCount = modCount;
                } catch (IndexOutOfBoundsException ex) {
                    throw new ConcurrentModificationException();
                }
            }

            final void checkForComodification() {
                if (modCount != expectedModCount)
                    throw new ConcurrentModificationException();
            }
        }
}
